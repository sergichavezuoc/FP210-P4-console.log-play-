{
  "swagger": "2.0",
  "info": {
    "title": "Console.log(play) API",
    "description": "API explanation with example. Available for integrations with third parties",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/getResultsAjax": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get Game Results. ",
        "description": "Endpoint to get all Games results. ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Game list with results.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "638dd84bf95b105648ae0b2d"
                },
                "number": {
                  "type": "string",
                  "example": "5c7230e8-f784-40bd-89ad-870a7f7f7ac5"
                },
                "room": {
                  "type": "string",
                  "example": "room1"
                },
                "result": {
                  "type": "number",
                  "example": 25
                },
                "winner": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "player1": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "player2": {
                  "type": "string",
                  "example": "i@i.es"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error listing Games.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error listing games"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/game/search": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get Games with filters. ",
        "description": "Endpoint to get Games filtered by query search. ",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Game list with results.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "638dd84bf95b105648ae0b2d"
                },
                "number": {
                  "type": "string",
                  "example": "5c7230e8-f784-40bd-89ad-870a7f7f7ac5"
                },
                "room": {
                  "type": "string",
                  "example": "room1"
                },
                "result": {
                  "type": "number",
                  "example": 25
                },
                "winner": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "player1": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "player2": {
                  "type": "string",
                  "example": "i@i.es"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error listing Games.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error listing games"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/game/": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get Game Results. ",
        "description": "Endpoint to get all Games results. ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Game list with results.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "638dd84bf95b105648ae0b2d"
                },
                "number": {
                  "type": "string",
                  "example": "5c7230e8-f784-40bd-89ad-870a7f7f7ac5"
                },
                "room": {
                  "type": "string",
                  "example": "room1"
                },
                "result": {
                  "type": "number",
                  "example": 25
                },
                "winner": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "player1": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "player2": {
                  "type": "string",
                  "example": "i@i.es"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error listing Games.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error listing games"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Games"
        ],
        "summary": "Create Game. ",
        "description": "Endpoint to create new Games. Requires a Game send in JSON as the one in the example",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Game Object",
            "schema": {
              "type": "object",
              "properties": {
                "number": {
                  "type": "number",
                  "example": 9
                },
                "room": {
                  "type": "string",
                  "example": "room1"
                },
                "result": {
                  "type": "number",
                  "example": 13
                },
                "winner": {
                  "type": "string",
                  "example": "s@s.es"
                },
                "player1": {
                  "type": "string",
                  "example": "r@r.es"
                },
                "player2": {
                  "type": "string",
                  "example": "s@s.es"
                }
              },
              "required": [
                "number",
                "room"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Game successfully created.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "saved"
                },
                "_id": {
                  "type": "string",
                  "example": "game_id"
                }
              },
              "required": [
                "message",
                "_id"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error creating Game.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error saving game"
                },
                "err": {
                  "type": "string",
                  "example": "error received"
                }
              },
              "required": [
                "message",
                "err"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/game/{id}": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get ONE Game. ",
        "description": "Endpoint to get one Game filtering by Game Id. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Game by Id.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "638dd84bf95b105648ae0b2d"
                },
                "number": {
                  "type": "string",
                  "example": "5c7230e8-f784-40bd-89ad-870a7f7f7ac5"
                },
                "room": {
                  "type": "string",
                  "example": "room1"
                },
                "result": {
                  "type": "number",
                  "example": 25
                },
                "winner": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "player1": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "player2": {
                  "type": "string",
                  "example": "i@i.es"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Game not found.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error Game not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error retrieving Game.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error retrieving game"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Games"
        ],
        "summary": "Modify Game. ",
        "description": "Endpoint to modify Games. Requires Game identifier in URL request. Requires a Game send in JSON as the one in the example. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Game identifier",
            "schema": {
              "type": "string",
              "example": "312343434"
            }
          },
          {
            "name": "obj",
            "in": "body",
            "description": "Game Object",
            "schema": {
              "type": "object",
              "properties": {
                "number": {
                  "type": "number",
                  "example": 9
                },
                "room": {
                  "type": "string",
                  "example": "room1"
                },
                "result": {
                  "type": "number",
                  "example": 13
                },
                "winner": {
                  "type": "string",
                  "example": "s@s.es"
                },
                "player1": {
                  "type": "string",
                  "example": "r@r.es"
                },
                "player2": {
                  "type": "string",
                  "example": "s@s.es"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game successfully modified.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "2345234535"
                },
                "number": {
                  "type": "number",
                  "example": 9
                },
                "room": {
                  "type": "string",
                  "example": "room1"
                },
                "result": {
                  "type": "number",
                  "example": 13
                },
                "winner": {
                  "type": "string",
                  "example": "s@s.es"
                },
                "player1": {
                  "type": "string",
                  "example": "r@r.es"
                },
                "player2": {
                  "type": "string",
                  "example": "s@s.es"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "The Game to modify was not found.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error game not found"
                },
                "err": {
                  "type": "string",
                  "example": "error received"
                }
              },
              "required": [
                "message",
                "err"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error creating Game.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error saving game"
                },
                "err": {
                  "type": "string",
                  "example": "error received"
                }
              },
              "required": [
                "message",
                "err"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Games"
        ],
        "summary": "Delete Game. ",
        "description": "Endpoint to delete a Game by Id. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Game successfully deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "2345234535"
                },
                "number": {
                  "type": "number",
                  "example": 9
                },
                "room": {
                  "type": "string",
                  "example": "room1"
                },
                "result": {
                  "type": "number",
                  "example": 13
                },
                "winner": {
                  "type": "string",
                  "example": "s@s.es"
                },
                "player1": {
                  "type": "string",
                  "example": "r@r.es"
                },
                "player2": {
                  "type": "string",
                  "example": "s@s.es"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/player/search": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get Players with filters. ",
        "description": "Endpoint to get Players filtered by query search. ",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Players list.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Juan"
                },
                "username": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                }
              },
              "required": [
                "name",
                "username",
                "password"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error listing Players.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error listing players"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/player/": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get Players. ",
        "description": "Endpoint to get all Players. ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Players list.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Juan"
                },
                "username": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                }
              },
              "required": [
                "name",
                "username",
                "password"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error listing Players.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error listing players"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Players"
        ],
        "summary": "Create Player. ",
        "description": "Endpoint to create new Players. Requires a Player send in JSON as the one in the example",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Player Object",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Juan"
                },
                "username": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                }
              },
              "required": [
                "name",
                "username",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Player successfully created.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "saved"
                },
                "_id": {
                  "type": "string",
                  "example": "game_id"
                }
              },
              "required": [
                "message",
                "_id"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error creating Player.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error saving player"
                },
                "err": {
                  "type": "string",
                  "example": "error received"
                }
              },
              "required": [
                "message",
                "err"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/player/login/": {
      "post": {
        "tags": [
          "Players"
        ],
        "summary": "Player Login. ",
        "description": "Endpoint to Player by username and password. ",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Player Object",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player found.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Juan"
                },
                "username": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                }
              },
              "required": [
                "name",
                "username",
                "password"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Player not found.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Player not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error searching Player.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error searching player"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/player/{id}": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Get ONE Player. ",
        "description": "Endpoint to get one Game filtering by username. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Player by Id.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Juan"
                },
                "username": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                }
              },
              "required": [
                "name",
                "username",
                "password"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Player not found.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error Player not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error retrieving Player.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error retrieving player"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Players"
        ],
        "summary": "Modify Player. ",
        "description": "Endpoint to modifiy Player filtering by Player username. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "username": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player Modified.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Juan"
                },
                "username": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                }
              },
              "required": [
                "name",
                "username",
                "password"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Error updating Player.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Player not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error updating Player.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error updating player"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Players"
        ],
        "summary": "Delete Player. ",
        "description": "Endpoint to DELETE one Player filtering by Player Id. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Player deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Juan"
                },
                "username": {
                  "type": "string",
                  "example": "j@j.es"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                }
              },
              "required": [
                "name",
                "username",
                "password"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Error deleting Player.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Player not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error deleting Player.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error deleting player"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/room/search": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Get Rooms with filters. ",
        "description": "Endpoint to get Rooms filtered by query search. ",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Rooms list.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "number",
                  "example": 12
                },
                "number": {
                  "type": "string",
                  "example": "room12"
                },
                "name": {
                  "type": "string",
                  "example": "Room 12"
                },
                "player1": {
                  "type": "string",
                  "example": ""
                },
                "player2": {
                  "type": "string",
                  "example": ""
                }
              },
              "required": [
                "_id",
                "number",
                "name"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error listing Rooms.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error listing rooms"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/room/": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Get Rooms. ",
        "description": "Endpoint to get all Rooms. ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Rooms list.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "number",
                  "example": 12
                },
                "number": {
                  "type": "string",
                  "example": "room12"
                },
                "name": {
                  "type": "string",
                  "example": "Room 12"
                },
                "player1": {
                  "type": "string",
                  "example": ""
                },
                "player2": {
                  "type": "string",
                  "example": ""
                }
              },
              "required": [
                "_id",
                "number",
                "name"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error listing Rooms.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error listing rooms"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rooms"
        ],
        "summary": "Create Room. ",
        "description": "Endpoint to create new Rooms. Requires a Room object send in JSON as the one in the example",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Room Object",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "number",
                  "example": 12
                },
                "number": {
                  "type": "string",
                  "example": "room12"
                },
                "name": {
                  "type": "string",
                  "example": "Room 12"
                },
                "player1": {
                  "type": "string",
                  "example": ""
                },
                "player2": {
                  "type": "string",
                  "example": ""
                }
              },
              "required": [
                "_id",
                "number",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Room successfully created.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "saved"
                },
                "_id": {
                  "type": "string",
                  "example": "game_id"
                }
              },
              "required": [
                "message",
                "_id"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error creating Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error saving room"
                },
                "err": {
                  "type": "string",
                  "example": "error received"
                }
              },
              "required": [
                "message",
                "err"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/room/{id}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Get ONE Room. ",
        "description": "Endpoint to get one Room filtering by Room Id. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Room by Id.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "number",
                  "example": 12
                },
                "number": {
                  "type": "string",
                  "example": "room12"
                },
                "name": {
                  "type": "string",
                  "example": "Room 12"
                },
                "player1": {
                  "type": "string",
                  "example": ""
                },
                "player2": {
                  "type": "string",
                  "example": ""
                }
              },
              "required": [
                "_id",
                "number",
                "name"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Room not found.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error Room not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error retrieving Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error retrieving room"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rooms"
        ],
        "summary": "Modify Room. ",
        "description": "Endpoint to modifiy Room filtering by Room Id. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "example": "any"
                },
                "room": {
                  "example": "any"
                },
                "result": {
                  "example": "any"
                },
                "winner": {
                  "example": "any"
                },
                "player1": {
                  "example": "any"
                },
                "player2": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Room Modified.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "number",
                  "example": 12
                },
                "number": {
                  "type": "string",
                  "example": "room12"
                },
                "name": {
                  "type": "string",
                  "example": "Room 12"
                },
                "player1": {
                  "type": "string",
                  "example": ""
                },
                "player2": {
                  "type": "string",
                  "example": ""
                }
              },
              "required": [
                "_id",
                "number",
                "name"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Error updating Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Room not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error updating Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error updating player"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rooms"
        ],
        "summary": "Delete Room. ",
        "description": "Endpoint to DELETE Room filtering by Room Id. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Room deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "number",
                  "example": 12
                },
                "number": {
                  "type": "string",
                  "example": "room12"
                },
                "name": {
                  "type": "string",
                  "example": "Room 12"
                },
                "player1": {
                  "type": "string",
                  "example": ""
                },
                "player2": {
                  "type": "string",
                  "example": ""
                }
              },
              "required": [
                "_id",
                "number",
                "name"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/ocupationroom/{room}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Get Room ocupation. ",
        "description": "Endpoint to get number of Players in a Room. The response is HTML",
        "parameters": [
          {
            "name": "room",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Room ocupation",
            "body": "<i id=\"oroom2\" style=\"\" class=\"fa fa-user-times fa-2x\"></i>"
          },
          "404": {
            "description": "Room not found.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error Room not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error retrieving Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error retrieving room"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/room/{room}/player/{player}": {
      "put": {
        "tags": [
          "Rooms"
        ],
        "summary": "Modify Room to pu Player in Room. ",
        "description": "Endpoint to add Player to a Room. ",
        "parameters": [
          {
            "name": "room",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "player",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Room Modified.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "number",
                  "example": 12
                },
                "number": {
                  "type": "string",
                  "example": "room12"
                },
                "name": {
                  "type": "string",
                  "example": "Room 12"
                },
                "player1": {
                  "type": "string",
                  "example": ""
                },
                "player2": {
                  "type": "string",
                  "example": ""
                }
              },
              "required": [
                "_id",
                "number",
                "name"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Error updating Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Room not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error updating Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error updating player"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/roomhtml/{id}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Room ocupation. ",
        "description": "Endpoint to get room ocupation in HTML. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Players in room: xxxx",
            "body": "Players in room: xxxx"
          },
          "404": {
            "description": "Error locating Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Room not found"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error locating Room.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error locating room"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/rooms/all-disconect": {
      "post": {
        "tags": [
          "Rooms"
        ],
        "summary": "Leave all rooms ",
        "description": "Endpoint to leave all rooms ocupation in case you get stuck due to an error. ",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Object",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "j@email.com"
                }
              },
              "required": [
                "username"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All rooms left",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "All rooms left"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Error leaving the rooms",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error leaving the rooms"
                }
              },
              "required": [
                "message"
              ],
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    }
  }
}